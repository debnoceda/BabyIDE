package packages.baby.frames;

import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/** URGENT! Topic: Unsaved Changes
 * MIKO HERE. Working on the process regarding unsaved changes especially during opening new file and exiting application
 * work has been done in the event of exiting application and opening another file when there are unsaved changes
 */
/**
 *
 * @author liaminakigillamac
 */

public class Ide extends javax.swing.JFrame {
//    private String codeContent;
    
    public Ide() {
        setTitle("Baby");
        initComponents();
        setupKeyboardShortcuts();
        WindowClosingHandler();
    }
    
    
    private void WindowClosingHandler() {
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                handleWindowClosing();
                
            }
        });
        
    }

    public void handleWindowClosing() {
        
        if (editor != null && editor.hasUnsavedChanges()) {
            int choice = JOptionPane.showConfirmDialog(Ide.this,
                "You have unsaved changes. Do you want to exit without saving?",
                "Confirm Exit",
                JOptionPane.YES_NO_OPTION
            );

            if (choice == JOptionPane.NO_OPTION) {
                return;
            }
        }
        
        System.exit(0);

    }
    
    private boolean isHomeScreenOpen() {
        Frame[] frames = Frame.getFrames();
        for (Frame frame : frames) {
            if (frame instanceof HomeScreen) {
                return true;
            }
        }
        return false;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idePnl = new javax.swing.JPanel();
        sidebarPnl = new javax.swing.JPanel();
        Home = new packages.baby.components.SidebarBtn();
        Save = new packages.baby.components.SidebarBtn();
        SaveAs = new packages.baby.components.SidebarBtn();
        Open = new packages.baby.components.SidebarBtn();
        editor = new packages.baby.components.CodeEditor();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(31, 31, 31));
        setPreferredSize(new java.awt.Dimension(1024, 768));

        idePnl.setBackground(new java.awt.Color(51, 51, 51));
        idePnl.setForeground(new java.awt.Color(31, 31, 31));
        idePnl.setToolTipText("");

        sidebarPnl.setBackground(new java.awt.Color(31, 31, 31));

        Home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/home.png"))); // NOI18N
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });

        Save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        SaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/saveAs.png"))); // NOI18N
        SaveAs.setToolTipText("");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });

        Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/openFile.png"))); // NOI18N
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidebarPnlLayout = new javax.swing.GroupLayout(sidebarPnl);
        sidebarPnl.setLayout(sidebarPnlLayout);
        sidebarPnlLayout.setHorizontalGroup(
            sidebarPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPnlLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(sidebarPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Open, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveAs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        sidebarPnlLayout.setVerticalGroup(
            sidebarPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPnlLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Open, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SaveAs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(456, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout idePnlLayout = new javax.swing.GroupLayout(idePnl);
        idePnl.setLayout(idePnlLayout);
        idePnlLayout.setHorizontalGroup(
            idePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(idePnlLayout.createSequentialGroup()
                .addComponent(sidebarPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
                .addGap(38, 38, 38))
        );
        idePnlLayout.setVerticalGroup(
            idePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sidebarPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(idePnlLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(editor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(342, 342, 342))
        );

        getContentPane().add(idePnl, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        
        if (!isHomeScreenOpen()) {
            HomeScreen home = new HomeScreen();
            home.setVisible(true);
        }
        
        else {
            System.out.println("Failed");
        }
//        //opens the home screen
//        HomeScreen home = new HomeScreen ();
//        home.show(); //display homeScreen here
//        
//        dispose(); //close the current frame after opening homeScreen
        
    }//GEN-LAST:event_HomeActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        editor.save();
    }//GEN-LAST:event_SaveActionPerformed

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        editor.saveAs();
    }//GEN-LAST:event_SaveAsActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        if (editor.hasUnsavedChanges()){
            int choice = JOptionPane.showConfirmDialog(
            Ide.this,
            "You have unsaved changes. Do you want to open another file without saving?",
            "Confirm Exit",
            JOptionPane.YES_NO_OPTION
            );
            
            if (choice == JOptionPane.NO_OPTION) {
                return;
            }
        }
        
        editor.open();
    }//GEN-LAST:event_OpenActionPerformed

    public void openAction(java.awt.event.ActionEvent evt) {
        OpenActionPerformed(evt);
    }
    
    private void setupKeyboardShortcuts() {
        // Set up the Save keyboard shortcut (Ctrl + S or Cmd + S)
        setupKeyboardShortcut("Save", KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx());

        // Set up the Save As keyboard shortcut (Shift + Ctrl + S or Shift + Cmd + S)
        setupKeyboardShortcut("Save As", KeyEvent.VK_S, KeyEvent.SHIFT_DOWN_MASK | Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx());
    }

    private void setupKeyboardShortcut(String actionName, int keyCode, int modifier) {
        Action action = new AbstractAction(actionName) {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleAction(actionName);
            }
        };

        action.putValue(Action.MNEMONIC_KEY, keyCode);

        KeyStroke keyStroke = KeyStroke.getKeyStroke(keyCode, modifier);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(keyStroke, actionName);
        getRootPane().getActionMap().put(actionName, action);
    }
    
    private void handleAction(String actionName) {
        ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, actionName);

        switch (actionName) {
            case "Save" -> SaveActionPerformed(event);
            case "Save As" -> SaveAsActionPerformed(event);
            
        }
    }
    
    
//    public static void main(String args[]) {
//        
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Ide().setVisible(true);               
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private packages.baby.components.SidebarBtn Home;
    private packages.baby.components.SidebarBtn Open;
    private packages.baby.components.SidebarBtn Save;
    private packages.baby.components.SidebarBtn SaveAs;
    private packages.baby.components.CodeEditor editor;
    private javax.swing.JPanel idePnl;
    private javax.swing.JPanel sidebarPnl;
    // End of variables declaration//GEN-END:variables
}
